def main():
    T = int(input())
    for i in range(T):
        cube = [['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w'], ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o'],
                ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g'], ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'],
                ['r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r'], ['y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y']]

        test(cube)


def test(cube):
    n = int(input())
    command = list(map(str, input().split()))
    for i in range(n):
        rotation(cube, command[i])
    for j in range(9):
        print(cube[0][j], end='')
        if (j + 1) % 3 == 0:
            print()


def rotation(c, command):
    if command[0] == "U" and command[1] == "+":
        uc(c)
    if command[0] == "U" and command[1] == "-":
        for i in range(3):
            uc(c)
    if command[0] == "D" and command[1] == "+":
        dc(c)
    if command[0] == "D" and command[1] == "-":
        for i in range(3):
            dc(c)
    if command[0] == "F" and command[1] == "+":
        fc(c)
    if command[0] == "F" and command[1] == "-":
        for i in range(3):
            fc(c)
    if command[0] == "L" and command[1] == "+":
        lc(c)
    if command[0] == "L" and command[1] == "-":
        for i in range(3):
            lc(c)
    if command[0] == "R" and command[1] == "+":
        rc(c)
    if command[0] == "R" and command[1] == "-":
        for i in range(3):
            rc(c)
    if command[0] == "B" and command[1] == "+":
        bc(c)
    if command[0] == "B" and command[1] == "-":
        for i in range(3):
            bc(c)


def uc(c):
    c[0][0], c[0][1], c[0][2], c[0][3], c[0][5], c[0][6], c[0][7], c[0][8] \
        = c[0][6], c[0][3], c[0][0], c[0][7], c[0][1], c[0][8], c[0][5], c[0][2]
    c[4][0], c[4][1], c[4][2], c[3][0], c[3][3], c[3][6], c[1][6], c[1][7], c[1][8], c[2][8], c[2][5], c[2][2] \
        = c[3][6], c[3][3], c[3][0], c[1][6], c[1][7], c[1][8], c[2][8], c[2][5], c[2][2], c[4][2], c[4][1], c[4][0]


def dc(c):
    c[5][0], c[5][1], c[5][2], c[5][3], c[5][5], c[5][6], c[5][7], c[5][8] \
        = c[5][6], c[5][3], c[5][0], c[5][7], c[5][1], c[5][8], c[5][5], c[5][2]
    c[1][0], c[1][1], c[1][2], c[3][2], c[3][5], c[3][8], c[4][8], c[4][7], c[4][6], c[2][6], c[2][3], c[2][0]\
        = c[3][2], c[3][5], c[3][8], c[4][8], c[4][7], c[4][6], c[2][6], c[2][3], c[2][0], c[1][0], c[1][1], c[1][2]


def fc(c):
    c[4][0], c[4][1], c[4][2], c[4][3], c[4][5], c[4][6], c[4][7], c[4][8] \
        = c[4][6], c[4][3], c[4][0], c[4][7], c[4][1], c[4][8], c[4][5], c[4][2]
    c[5][0], c[5][1], c[5][2], c[3][8], c[3][7], c[3][6], c[0][8], c[0][7], c[0][6], c[2][8], c[2][7], c[2][6]\
        = c[3][8], c[3][7], c[3][6], c[0][8], c[0][7], c[0][6], c[2][8], c[2][7], c[2][6], c[5][0], c[5][1], c[5][2]


def lc(c):
    c[2][0], c[2][1], c[2][2], c[2][3], c[2][5], c[2][6], c[2][7], c[2][8] \
        = c[2][6], c[2][3], c[2][0], c[2][7], c[2][1], c[2][8], c[2][5], c[2][2]
    c[0][0], c[0][3], c[0][6], c[1][0], c[1][3], c[1][6], c[5][0], c[5][3], c[5][6], c[4][0], c[4][3], c[4][6]\
        = c[1][0], c[1][3], c[1][6], c[5][0], c[5][3], c[5][6], c[4][0], c[4][3], c[4][6], c[0][0], c[0][3], c[0][6]


def rc(c):
    c[3][0], c[3][1], c[3][2], c[3][3], c[3][5], c[3][6], c[3][7], c[3][8] \
        = c[3][6], c[3][3], c[3][0], c[3][7], c[3][1], c[3][8], c[3][5], c[3][2]
    c[1][2], c[1][5], c[1][8], c[0][2], c[0][5], c[0][8], c[4][2], c[4][5], c[4][8], c[5][2], c[5][5], c[5][8]\
        = c[0][2], c[0][5], c[0][8], c[4][2], c[4][5], c[4][8], c[5][2], c[5][5], c[5][8], c[1][2], c[1][5], c[1][8]


def bc(c):
    c[1][0], c[1][1], c[1][2], c[1][3], c[1][5], c[1][6], c[1][7], c[1][8] \
        = c[1][6], c[1][3], c[1][0], c[1][7], c[1][1], c[1][8], c[1][5], c[1][2]
    c[3][0], c[3][1], c[3][2], c[5][8], c[5][7], c[5][6], c[2][0], c[2][1], c[2][2], c[0][0], c[0][1], c[0][2]\
        = c[5][8], c[5][7], c[5][6], c[2][0], c[2][1], c[2][2], c[0][0], c[0][1], c[0][2], c[3][0], c[3][1], c[3][2]


if __name__ == "__main__":
    main()
