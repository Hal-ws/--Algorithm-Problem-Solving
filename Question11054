import sys

def bitonic(series, idx):
    temp = series[:idx]
    return leftmax(temp, idx, series[idx]) + rightmax(temp, idx, series[idx]) + 1

def leftmax(temp, idx, val):
    for j in range(idx):
        temp[]
    a = 0
    for j in range(1, idx + 1):
        if temp[idx - j][0] < val and temp[idx - j][1] > a:
            a = temp[idx - j][1]
    return a

def rightmax(temp, idx, val):
    a = 0
    for j in range(1, idx + 1):
        if temp[idx - j][0] < val and temp[idx - j][1] > a:
            a = temp[idx - j][1]
    return a

N = int(sys.stdin.readline())
series = list(map(int, sys.stdin.readline().split()))

bitonics = [0] * N
for i in range(N):
    bitonics[i] = bitonic(series, i)

print(max(bitonics))
